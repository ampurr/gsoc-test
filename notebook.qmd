---
title: "Coding Notebook"
code-fold: TRUE
code-summary: error message
---

## What is This?

This is a public-facing notebook about what I'm doing, what I'm struggling to do, and what mistakes I've been making.


## Week 1 (May 29 to June 4)

This week, I set up a preliminary website for 

### Learned

- Learned more about the `pkgdown` R package:
  + Began looking into the [`pkgdown` documentation](https://pkgdown.r-lib.org/index.html).
  + Webpages seemed to be generated from `.rmd` files, so I was curious if the package also worked the same way for `.qmd` files. The [answer is no](https://community.rstudio.com/t/how-to-run-quarto-qmd-from-within-package/154711/2).
  + Looked up why `pkgdown` [adds the `docs/` directory into `.gitignore`](https://stackoverflow.com/questions/69507610/unable-to-push-package-website-pkgdown-from-r-to-github). But it's still unclear to me.
  + Noticed that the intro to `pkgdown` page [accidentally uses the word "setting" twice in a row](https://pkgdown.r-lib.org/articles/pkgdown.html).
- Learned more about git:
  + Learned of `gitk`, which I've never used before.
  + Learned about [managing my git credentials in `usethis`](https://usethis.r-lib.org/articles/git-credentials.html).
- Looked up some tips on how to write code comments better. Tips from: [Antonin Januska](https://web.archive.org/web/20201111223912/https://antjanus.com/blog/web-design-tips/best-comment-separator/) and [Ellen Spertus](https://stackoverflow.blog/2021/12/23/best-practices-for-writing-code-comments/).
- Learned that the string `GITHUB_PAT` can be found in the `.github/workflows` directory.
- Learned about documentation managers. There's: [Zeal](https://zealdocs.org/) and [DevDocs](https://devdocs.io/).
- Learned that there are, like, eight test suites. And they automatically run when you make a pull request to the `animint2` repository. That's nice. I'm also learning that the tests take a long time to run---about 45 minutes.
- Turns out that `ripgrep-all` doesn't look through YAML files. I need something like `yq` instead. Why?

### Created

- Created `README.md` from the `README.org` file via the magic of `pandoc`.
- Created a preliminary website and documented how I generated it:
  + For the documentation and code, see `website_setup.Rmd`. Currently have information about building the website.
  + Put the site up online.
- Accidentally made a pull request in `tdhock/animint2`. Should've been `ampurr/animint2` instead. I closed it---be more careful.
- Made a pull request in `ampurr/animint2` but did not initially succeed in closing it due to a test failing. Later, I pushed it anyway, which then threw the website online.
- Successfully set up the website. But there are some errors. Most noticeably: it includes some functions that don't seem to be part of `animint2`. Will need to investigate further.

### Confused

One of the tests---"Test Suite compiler"---failed. Here's the error message:

```{r}
#| eval = FALSE

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-compiler-gist.R:4:3'): animint2gist() returns an object of class 'gist' ──
Error: Error: In non-interactive environments, please set GITHUB_PAT env to a GitHub access token (https://help.github.com/articles/creating-an-access-token-for-command-line-use)
Backtrace:
    ▆
 1. └─animint2::animint2gist(list(p = qplot(1:10)), browse = FALSE) at test-compiler-gist.R:4:2
 2.   └─gistr::gist_create(...)
 3.     ├─gistr:::gist_POST(...)
 4.     │ └─gistr:::cVERB(...)
 5.     │   └─crul::HttpClient$new(url, headers = c(auth, headers), opts = list(...))
 6.     │     └─crul (local) initialize(...)
 7.     └─gistr::gist_auth()

[ FAIL 1 | WARN 0 | SKIP 5 | PASS 756 ]
Error: Error: Test failures
Execution halted
Error: Process completed with exit code 1.
```
This is confusing, since I thought `GITHUB_PAT` was already set with a GitHub Access Token. I was also unaware of the large array of tests that activate when you try to push something. Quite frankly, I'm not sure what they do or what they prevent. It feels different than using `testthat`.

I also don't understand the GitHub workflow stuff. What exactly is GitHub doing?


## Week 2 (June 5 to June 11)

This week, I tried to fix [issue 89](https://github.com/tdhock/animint2/issues/89).

### Learned

- Learned that the [`roxygen2` package](https://roxygen2.r-lib.org/) generates both the `.Rd` files and part of the `DESCRIPTION` for packages.
- Learned that [`devtools` AUR package](https://aur.archlinux.org/packages/r-devtools) has so so so many dependencies.
- This is real basic, but I re-learned that `bash foo.sh` runs shell scripts. I haven't run one since September of 2022.
- Looked into _Writing R Extensions_, which I was not previously aware existed:
  + Read the [DESCRIPTION file](https://cran.r-project.org/doc/manuals/R-exts.html#The-DESCRIPTION-file) portion.
  + Learned about [RFC 2822](https://datatracker.ietf.org/doc/html/rfc2822), a syntax standard for text messages in email. FastMail mentions that [RFC 5322 makes RFC 2822 obsolete](https://www.fastmail.help/hc/en-us/articles/1500000278382-Email-standards), but _Writing_ requests emails be written in RFC 2822 formatting.
- When using Git Bash---i.e. [MinGW](https://mingw.osdn.io/)---and `cd`, I need to swap the backwards slashes for forward slashes. Oddly, the backwards slashes work for some directories but not for others. It took me a while to realize this while debugging.
- Figured out that the `borders()` function is part of `fortify-map.r`. That's why it disappeared when I deleted that R file.
- Learning about bash.

### Created

- I deleted the `fortify.r` and `fortify.foo.r` files in the `R/` directory. (Technically the opposite of creation.)
- Then I ran `build.sh` to rebuild the `DESCRIPTION` and got rid of the unnecessary `fortify.foo.Rd` files. It also removed the `borders.Rd` and `map_data.Rd` files.
- Removed `maptools` as a DESCRIPTION suggest.
- Manually removed all links to the deleted files. This involved editing the following 5 files in the `R/` directory, which altered 38 files in the `man/` directory via `build.sh`. Those 5 R files were:
  + `annotation_map.r`
  + `autoplot.r`
  + `plot.r`
  + `layer.r`
  + `geom-map.r`
- Updated the DESCRIPTION from version 2023.3.14 to 2023.6.6
- Updated NEWS by briefly mentioning all the changes I made.
- Made a pull request with the aforementioned changes and linked it to [issue 89](https://github.com/tdhock/animint2/issues/89) on GitHub.

### Debugging

`build.sh` throws up a number of error messages, which can be found in `00check.log`. Two and two of those messages are "Running examples in 'animint2-Ex.R' failed" and "Running the tests in 'tests/testthat.R' failed," respectively.

The reason why the running examples fail seem to be related to the following error message: "Error in `FUN(X[[i]], ...)`: numeric 'envir' arg not of length one." I know this is code from the `ggplot2` side of things. `ripgrep-all` doesn't turn anything up, which suggests that it's not a manually written error message.

One hypothesis is that this is associated with changes that I made. To test this hypothesis, I made a new branch stemming from the unchanged main branch, `89-bug-exam-unaltered-main-branch`. Then I ran `build.sh`. Consistent with this hypothesis, `build.sh` did not output the same errors. Assuming that the hypothesis is correct---that it is my fault---also means the problem is not with `build.sh`.^[It does seem to have problems rendering the PDF, but that's a problem for future me.] So I should stop playing around with it and looking up bash stuff. That's not relevant.

Follow-up hypothesis: 

### Confused

`yay -S r-plyr r-reshape2` isn't working and requires "manual intervention." Why? Luckily, this isn't important---`build.sh` runs perfectly fine on Git Bash and therefore I don't actually need to figure out why the `yay` helper is acting this way.


## Week 2 (June 12 to June 18)

Nothing here yet. Unless you have an [unusual ontology of time](https://iep.utm.edu/time/#SH14a), of course. In that case, something was always here and always will be.